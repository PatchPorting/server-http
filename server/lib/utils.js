/*
  Copyright (c) 2017 IBM Corp.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*/

'use strict';

// TODO: Publish as new library in GitHub.

const appEnv = require('cfenv').getAppEnv();
const lbErrors = require('loopback-common-errors');

// Our utils library as base.
const utils = require('./utils-new');
// TODO: When we publish it.
// const utils = require('utils');
const pkgName = require('../../package.json').name;


// To avoid having to pass the project name each time we call it.
utils.dbg = filePath => utils.debug(pkgName, filePath);


// We add some quick links to useful values in most of our apps.

// In case we need to overwrite the automatic value generated by the library "cfenv"
// or the last ones due to any reason. (ie: deploy in other foundries)
if (process.env.APP_URL) { appEnv.url = process.env.APP_URL; }


// Custom shortcurts from here.

// DB credentials.

appEnv.dbUris = {};
if (appEnv.services) {
  // https://new-console.ng.bluemix.net/docs/services/MongoDB/index.htm
  if (appEnv.services.mongodb && appEnv.services.mongodb[0] &&
      !appEnv.services.mongodb[0].credentials &&
      !appEnv.services.mongodb[0].credentials.url) {
    appEnv.dbUris.mongo = appEnv.services.mongodb[0].credentials.url;
  }
  // If we have a setup in compose it takes precedence
  if (appEnv.services['compose-for-mongodb'] &&
      appEnv.services['compose-for-mongodb'][0] &&
      appEnv.services['compose-for-mongodb'][0].credentials &&
      appEnv.services['compose-for-mongodb'][0].credentials.uri) {
    const originalUri = appEnv.services['compose-for-mongodb'][0].credentials.uri;
    // Trick because Compose provides the "admin" database in the URI by default.
    const fixed = originalUri.replace('/admin?', `/${pkgName}?`);

    // TODO: Use the proper CA (in the Bluemix env var) here.
    appEnv.dbUris.mongo = `${fixed}&authSource=admin&sslValidate=false`;
  }
  if (appEnv.services['compose-for-elasticsearch'] &&
      appEnv.services['compose-for-elasticsearch'][0] &&
      appEnv.services['compose-for-elasticsearch'][0].credentials &&
      appEnv.services['compose-for-elasticsearch'][0].credentials.uri
  ) {
    appEnv.dbUris.elastic =
      appEnv.services['compose-for-elasticsearch'][0].credentials.uri;
  }
  if (appEnv.services.cloudantNoSQLDB &&
      appEnv.services.cloudantNoSQLDB[0] &&
      appEnv.services.cloudantNoSQLDB[0].credentials &&
      appEnv.services.cloudantNoSQLDB[0].credentials.url
  ) {
    appEnv.dbUris.cloudant = appEnv.services.cloudantNoSQLDB[0].credentials.url;
  }
}
// Same here for different setups.
if (process.env.MONGODB_URI) { appEnv.dbUris.mongo = process.env.MONGODB_URI; }


//  Bluemix Apache Kafka
if (appEnv.services.messagehub &&
    appEnv.services.messagehub.credentials &&
    appEnv.services.messagehub.credentials.mqlight_lookup_url &&
    appEnv.services.messagehub.credentials.user &&
    appEnv.services.messagehub.credentials.password
) {
  appEnv.queue = {
    service: appEnv.services.messagehub.credentials.mqlight_lookup_url,
    user: appEnv.services.messagehub.credentials.user,
    password: appEnv.services.messagehub.credentials.password,
  };
}


// Cloudfoundry environment with steroids.
utils.appEnv = appEnv;


// Some LoopBack useful stuff.

utils.loopback = {
  errors: lbErrors,
  getUserId: (req) => {
    const app = req.app;

    return new Promise((resolve, reject) => {
      const AccessToken = app.models.AccessToken;
      const token = req.query.access_token || req.headers.Authorization;

      // To work local (no auth). Moreover we want to store as much info as possible.
      if (!token || !AccessToken) {
        resolve('noId (no token)');

        return;
      }

      AccessToken.findById(token).then((result) => {
        if (!result) {
          resolve('noId (not found)');

          return;
        }

        resolve(result.userId);
      })
      .catch(err => reject(new Error(`Finding the User ID: ${err.message}`)));
    });
  },
};


// From here some helpers to print in Bluemix native logs and Monitoring and
// Analytics addon in a more or less comfortable way. Both don't support colors :(.

utils.logger = {
  info: (msg, obj) => {
    let finalMsg = `\n${msg || '-'}`;

    if (obj) { finalMsg = `${finalMsg}: ${JSON.stringify(obj, null, 2)}`; }

    console.log(finalMsg); // eslint-disable-line no-console
  },
  error: (msg, err) => {
    const separator = '----------';
    let finalMsg = `\nERROR: ${msg || '-'}`;

    if (err) {
      if (err.message) { finalMsg = `${finalMsg}\nmessage: ${err.message}`; }
      if (err.stack) {
        finalMsg = `${finalMsg}\nstack:\n${separator}\n${err.stack}\n${separator}`;
      }
    }

    console.error(finalMsg); // eslint-disable-line no-console
  },
};


module.exports = utils;
